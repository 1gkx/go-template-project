---
# Lint directives.
lint:
  # Linter files to ignore.
  ignores:
    - id: ENUM_FIELD_NAMES_PREFIX
      files:
        # NOTE: UNIX paths will be properly accepted by both UNIX and Windows.
        - pkg/api/api.proto

  # Linter files to walk.
  #files:
    # The specific files to exclude.
    #exclude:
      # NOTE: UNIX paths will be properly accepted by both UNIX and Windows.
      # - path/to/file

  # Linter directories to walk.
  #directories:
    # The specific directories to exclude.
    #exclude:
      # NOTE: UNIX paths will be properly accepted by both UNIX and Windows.
      #- path/to/dir

  # Linter rules.
  # Run `protolint list` to see all available rules.
  rules:
    # Determines whether to include the default set of linters.
    #no_default: true

    # Set the default to all linters. This option works the other way around as no_default does.
    # If you want to enable this option, delete the comment out below and no_default.
    all_default: true

    # The specific linters to add.
#    add:
#      - FILE_HAS_COMMENT                      #Verifies that a file starts with a doc comment.
#      - SYNTAX_CONSISTENT                     #Verifies that syntax is a specified version(default is proto3).
#      - FILE_NAMES_LOWER_SNAKE_CASE           #Verifies that all file names are lower_snake_case.proto.
#      - QUOTE_CONSISTENT                      #Verifies that the use of quote for strings is consistent.
#      - ORDER                                 #Verifies that all files should be ordered in the specific manner.
#      - INDENT                                #Enforces a consistent indentation style.
#      - MAX_LINE_LENGTH                       #Enforces a maximum line length.
#      - PACKAGE_NAME_LOWER_CASE               #Verifies that the package name doesn't contain any uppercase letters.
#      - IMPORTS_SORTED                        #Enforces sorted imports.
#      - ENUM_FIELD_NAMES_PREFIX               #Verifies that enum field names are prefixed with its ENUM_NAME_UPPER_SNAKE_CASE.
#      - ENUM_FIELD_NAMES_UPPER_SNAKE_CASE     #Verifies that all enum field names are CAPITALS_WITH_UNDERSCORES.
#      - ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH  #Verifies that the zero value enum should have the suffix (e.g. "UNSPECIFIED", "INVALID").
#      - ENUM_FIELDS_HAVE_COMMENT              #Verifies that all enum fields have a comment.
#      - ENUM_NAMES_UPPER_CAMEL_CASE           #Verifies that all enum names are CamelCase (with an initial capital).
#      - ENUMS_HAVE_COMMENT                    #Verifies that all enums have a comment.
#      - FIELD_NAMES_LOWER_SNAKE_CASE          #Verifies that all field names are underscore_separated_names.
#      - FIELD_NAMES_EXCLUDE_PREPOSITIONS      #Verifies that all field names don't include prepositions (e.g. "for", "during", "at").
#      - FIELDS_HAVE_COMMENT                   #Verifies that all fields have a comment.
#      - PROTO3_FIELDS_AVOID_REQUIRED          #Verifies that all fields should avoid required for proto3.
#      - PROTO3_GROUPS_AVOID                   #Verifies that all groups should be avoided for proto3.
#      - REPEATED_FIELD_NAMES_PLURALIZED       #Verifies that repeated field names are pluralized names.
#      - MESSAGE_NAMES_UPPER_CAMEL_CASE        #Verifies that all message names are CamelCase (with an initial capital).
#      - MESSAGE_NAMES_EXCLUDE_PREPOSITIONS    #Verifies that all message names don't include prepositions (e.g. "With", "For").
#      - MESSAGES_HAVE_COMMENT                 #Verifies that all messages have a comment.
#      - RPC_NAMES_UPPER_CAMEL_CASE            #Verifies that all rpc names are CamelCase (with an initial capital).
#      - RPC_NAMES_CASE                        #Verifies that all rpc names conform to the specified convention.
#      - RPCS_HAVE_COMMENT                     #Verifies that all rpcs have a comment.
#      - SERVICE_NAMES_UPPER_CAMEL_CASE        #Verifies that all service names are CamelCase (with an initial capital).
#      - SERVICE_NAMES_END_WITH                #Verifies that all service names end with the specified value.
#      - SERVICES_HAVE_COMMENT                 #Verifies that all services have a comment.

    # The specific linters to remove.
    #remove:
    #  - RPC_NAMES_UPPER_CAMEL_CASE

  # Linter rules option.
  rules_option:
    # MAX_LINE_LENGTH rule option.
    max_line_length:
      # Enforces a maximum line length
      max_chars: 80
      # Specifies the character count for tab characters
      tab_chars: 2

    # INDENT rule option.
    indent:
      # Available styles are 4(4-spaces), 2(2-spaces) or tab.
      style: 2
      # Specifies if it should stop considering and inserting new lines at the appropriate positions
      # when the inner elements are on the same line. Default is false.
      not_insert_newline: false

    # FILE_NAMES_LOWER_SNAKE_CASE rule option.
#    file_names_lower_snake_case:
#      excludes:
#        - ../proto/invalidFileName.proto

    # QUOTE_CONSISTENT rule option.
    quote_consistent:
      # Available quote are "double" or "single".
      quote: double

    # ENUM_FIELD_NAMES_ZERO_VALUE_END_WITH rule option.
    enum_field_names_zero_value_end_with:
      suffix: UNSPECIFIED

    # SERVICE_NAMES_END_WITH rule option.
    service_names_end_with:
      text: Service

    # FIELD_NAMES_EXCLUDE_PREPOSITIONS rule option.
    field_names_exclude_prepositions:
      # The specific prepositions to determine if the field name includes.
      prepositions:
        - for
        - at
        - of
      # The specific keywords including prepositions to ignore. E.g. end_of_support is a term you would like to use, and skip checking.
      excludes:
        - end_of_support

    # REPEATED_FIELD_NAMES_PLURALIZED rule option.
    ## The spec for each rule follows the implementation of https://github.com/gertd/go-pluralize.
    ## Plus, you can refer to this rule's test code.
    repeated_field_names_pluralized:
      uncountable_rules:
        - available
        - scale
        - list
      irregular_rules:
        Irregular: Regular

    # MESSAGE_NAMES_EXCLUDE_PREPOSITIONS rule option.
    message_names_exclude_prepositions:
      # The specific prepositions to determine if the message name includes.
      prepositions:
        - With
        - For
        - Of
      # The specific keywords including prepositions to ignore. E.g. EndOfSupport is a term you would like to use, and skip checking.
      excludes:
        - EndOfSupport
        -
    #  RPC_NAMES_CASE rule option.
    #rpc_names_case:
      # The specific convention the name should conform to.
      ## Available conventions are "lower_camel_case", "upper_snake_case", or "lower_snake_case".
      #convention: upper_camel_case

    # MESSAGES_HAVE_COMMENT rule option.
    messages_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # SERVICES_HAVE_COMMENT rule option.
    services_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # RPCS_HAVE_COMMENT rule option.
    rpcs_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # FIELDS_HAVE_COMMENT rule option.
    fields_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # ENUMS_HAVE_COMMENT rule option.
    enums_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # ENUM_FIELDS_HAVE_COMMENT rule option.
    enum_fields_have_comment:
      # Comments need to begin with the name of the thing being described. default is false.
      should_follow_golang_style: true

    # SYNTAX_CONSISTENT rule option.
    syntax_consistent:
      # Default is proto3.
      version: proto3
